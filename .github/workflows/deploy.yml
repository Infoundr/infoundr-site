name: Build and Deploy to ICP

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DFX_VERSION: "0.25.1-beta.0"  # dfx version
  BACKEND_PACKAGE: "backend"  # Backend canister name
  FRONTEND_PACKAGE: "frontend"  # Frontend canister name
  VERSION: ${{ github.sha }}  
  DFX_WARNING: "-mainnet_plaintext_identity"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          targets: wasm32-unknown-unknown
          override: true

      - name: Install PocketIC server
        uses: dfinity/pocketic@main
      - name: Confirm successful installation
        run: $POCKET_IC_BIN --version

      - name: Install dfx
        uses: dfinity/setup-dfx@main
        with:
          version: ${{ env.DFX_VERSION }}
          install-dfxvm: true
          install-dfx: true

      - name: Setup dfx environment
        run: |
          source "$HOME/.local/share/dfx/env"
          dfxvm install ${{ env.DFX_VERSION }}
          dfxvm default ${{ env.DFX_VERSION }}
          dfx --version

      - name: Build Backend
        uses: ./.github/actions/build
        with:
          lint: "false"  # Disable linting temporarily
          test: "true"
          gzip: "true"
          version: ${{ env.VERSION }}
          package: ${{ env.BACKEND_PACKAGE }}
          build_args: "--no-default-features"  # Skip some checks

      - name: Prepare Frontend Build
        run: |
          source "$HOME/.local/share/dfx/env"
          mkdir -p .dfx/local/canisters/frontend
          cp src/frontend/assetstorage.did .dfx/local/canisters/frontend/

      - name: Build Frontend
        run: |
          source "$HOME/.local/share/dfx/env"
          # Create necessary directories
          mkdir -p $GITHUB_WORKSPACE/wasm
          cd $GITHUB_WORKSPACE/src/frontend
          npm install
          # Build the frontend assets
          npm run build
          # Create the frontend canister
          cd $GITHUB_WORKSPACE
          dfx canister create frontend --network ic || true
          # Build the frontend canister
          dfx build frontend --network ic
          # Copy the wasm file to the wasm directory
          cp .dfx/ic/canisters/frontend/frontend.wasm.gz $GITHUB_WORKSPACE/wasm/frontend.wasm.gz

      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BACKEND_PACKAGE }}_${{ github.sha }}
          path: wasm/${{ env.BACKEND_PACKAGE }}_${{ env.VERSION }}.wasm.gz
          if-no-files-found: error

      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FRONTEND_PACKAGE }}_${{ github.sha }}
          path: wasm/frontend.wasm.gz
          if-no-files-found: error

      - name: Prepare Deployment
        run: |
          mkdir -p wasm
          mkdir -p src/frontend/dist

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.BACKEND_PACKAGE }}_${{ github.sha }}
          path: wasm

      - name: Download Frontend Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.FRONTEND_PACKAGE }}_${{ github.sha }}
          path: wasm

      - name: Deploy Backend
        uses: ./.github/actions/deploy
        with:
          identity: ${{ secrets.IC_IDENTITY }}
          canister_name: ${{ env.BACKEND_PACKAGE }}
          network: ic
          wasm_file: wasm/${{ env.BACKEND_PACKAGE }}_${{ env.VERSION }}.wasm.gz

      - name: Deploy Frontend
        uses: ./.github/actions/deploy
        with:
          identity: ${{ secrets.IC_IDENTITY }}
          canister_name: ${{ env.FRONTEND_PACKAGE }}
          network: ic
          wasm_file: wasm/frontend.wasm.gz

      - name: Update Configuration
        run: |
          source "$HOME/.local/share/dfx/env"
          # Get the mainnet canister ID
          CANISTER_ID=$(dfx canister --network ic id backend)
          
          # Create mainnet environment configuration
          mkdir -p src/frontend
          cat > src/frontend/.env << EOL
          VITE_DFX_NETWORK=ic
          VITE_IC_HOST=https://icp0.io
          VITE_CANISTER_ID=$CANISTER_ID
          VITE_AUTH_MODE=backend
          VITE_ENV_MODE=mainnet
          EOL
          
          # Update config.ts if it exists
          if [ -f "src/frontend/src/config.ts" ]; then
            # Update MAINNET_CANISTER_ID
            if grep -q "MAINNET_CANISTER_ID" src/frontend/src/config.ts; then
              sed -i "s|export const MAINNET_CANISTER_ID = \".*\";|export const MAINNET_CANISTER_ID = \"$CANISTER_ID\";|" src/frontend/src/config.ts
            else
              echo "export const MAINNET_CANISTER_ID = \"$CANISTER_ID\";" >> src/frontend/src/config.ts
            fi
            
            # Update mode
            if grep -q "mode:" src/frontend/src/config.ts; then
              sed -i "s|mode: import.meta.env.VITE_ENV_MODE || 'local'|mode: 'mainnet'|" src/frontend/src/config.ts
            else
              echo "mode: 'mainnet'," >> src/frontend/src/config.ts
            fi
            
            # Update authMode
            if grep -q "authMode:" src/frontend/src/config.ts; then
              sed -i "s|authMode: import.meta.env.VITE_AUTH_MODE || 'backend'|authMode: 'backend'|" src/frontend/src/config.ts
            else
              echo "authMode: 'backend'," >> src/frontend/src/config.ts
            fi
          fi
          
          # Update mockData.ts if it exists
          if [ -f "src/frontend/src/mocks/mockData.ts" ]; then
            # Create a temporary file
            TMP_FILE=$(mktemp)
            # Read the file and replace DEV_MODE
            while IFS= read -r line; do
              if [[ $line == *"export const DEV_MODE"* ]]; then
                echo "export const DEV_MODE = false;" >> "$TMP_FILE"
              else
                echo "$line" >> "$TMP_FILE"
              fi
            done < "src/frontend/src/mocks/mockData.ts"
            # Replace the original file
            mv "$TMP_FILE" "src/frontend/src/mocks/mockData.ts"
          fi
