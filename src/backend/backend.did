type Accelerator = record {
  id : principal;
  graduated_startups : nat32;
  active_startups : nat32;
  logo : opt vec blob;
  name : text;
  email : text;
  website : text;
  team_members : vec TeamMember;
  total_startups : nat32;
  recent_activity : vec Activity;
  email_verified : bool;
  invites_sent : nat32;
};
type AcceleratorSignUp = record {
  name : text;
  email : text;
  website : text;
  membername : text;
};
type AcceleratorUpdate = record {
  graduated_startups : opt nat32;
  active_startups : opt nat32;
  logo : opt opt vec blob;
  name : opt text;
  email : opt text;
  website : opt text;
  total_startups : opt nat32;
  email_verified : opt bool;
  invites_sent : opt nat32;
};
type AcceleratorUpdateWithId = record {
  accelerator_id : text;
  updates : AcceleratorUpdate;
};
type Activity = record {
  activity_type : ActivityType;
  description : text;
  timestamp : nat64;
};
type ActivityType = variant {
  Graduated;
  UpdatedPitchDeck;
  Joined;
  Other : text;
  AcceleratorCreated;
  SentInvite;
  MissedMilestone;
};
type Admin = record { created_at : nat64; principal_id : text };
type ApiMessage = record {
  id : text;
  metadata : opt ApiMetadata;
  bot_name : text;
  user_id : text;
  message : text;
  response : text;
  timestamp : nat64;
};
type ApiMetadata = record {
  has_token : opt bool;
  direct_auth : opt bool;
  oauth_state : opt text;
  needs_token : opt bool;
  oauth_url : opt text;
  session_active : opt bool;
};
type AsanaAccount = record {
  token : text;
  workspace_id : text;
  project_ids : vec record { text; text };
};
type BotType = variant { Dean; Uncle; Benny };
type ChatMessage = record {
  id : principal;
  question_asked : opt text;
  content : text;
  bot_name : opt text;
  role : MessageRole;
  timestamp : nat64;
};
type ConnectedAccounts = record {
  asana : opt AsanaAccount;
  github : opt GitHubAccount;
};
type ConnectionStatus = record {
  github_connected : bool;
  selected_repo : opt text;
  asana_connected : bool;
  asana_workspace : opt text;
};
type DashboardToken = record {
  token : blob;
  created_at : nat64;
  openchat_id : text;
  expires_at : nat64;
};
type DiscordUser = record {
  site_principal : opt principal;
  username : opt text;
  guild_id : opt text;
  discord_id : text;
};
type GenerateStartupInviteInput = record {
  accelerator_id : text;
  program_name : text;
  invite_type : InviteType;
  startup_name : text;
  email : opt text;
  expiry_days : opt nat64;
};
type GitHubAccount = record { token : text; selected_repo : opt text };
type InviteStatus = variant { Used; Revoked; Expired; Pending };
type InviteType = variant { Code; Link };
type Issue = record {
  id : text;
  status : IssueStatus;
  title : text;
  body : text;
  created_at : nat64;
  repository : text;
};
type IssueStatus = variant { Open; Closed };
type MemberStatus = variant { Active; Declined; Pending };
type MessageRole = variant { User; Assistant };
type OpenChatUser = record {
  site_principal : opt principal;
  last_interaction : nat64;
  openchat_id : text;
  first_interaction : nat64;
};
type PlaygroundStats = record {
  bot_usage : vec record { text; nat32 };
  unique_users : nat32;
  total_messages : nat32;
};
type RemoveTeamMember = record { email : text };
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : ChatMessage; Err : text };
type Result_10 = variant { Ok : nat32; Err : text };
type Result_11 = variant { Ok : Startup; Err : text };
type Result_12 = variant { Ok : StartupCohort; Err : text };
type Result_13 = variant { Ok : StartupStatus; Err : text };
type Result_14 = variant { Ok : StartupInvite; Err : text };
type Result_15 = variant { Ok : opt Accelerator; Err : text };
type Result_16 = variant { Ok : vec Accelerator; Err : text };
type Result_17 = variant { Ok : vec DiscordUser; Err : text };
type Result_18 = variant { Ok : vec OpenChatUser; Err : text };
type Result_19 = variant { Ok : vec SlackUser; Err : text };
type Result_2 = variant { Ok : vec ApiMessage; Err : text };
type Result_20 = variant { Ok : vec User; Err : text };
type Result_21 = variant { Ok : opt Startup; Err : text };
type Result_22 = variant { Ok : vec StartupActivity; Err : text };
type Result_23 = variant { Ok : opt StartupInvite; Err : text };
type Result_24 = variant { Ok : StartupStats; Err : text };
type Result_25 = variant { Ok : opt TeamInvite; Err : text };
type Result_26 = variant { Ok : UserActivity; Err : text };
type Result_27 = variant { Ok : vec WaitlistEntry; Err : text };
type Result_28 = variant { Ok : text; Err : text };
type Result_29 = variant { Ok : WaitlistEntry; Err : text };
type Result_3 = variant {
  Ok : vec record { text; UserSubscription };
  Err : text;
};
type Result_30 = variant { Ok : vec StartupCohort; Err : text };
type Result_31 = variant { Ok : vec StartupStatus; Err : text };
type Result_32 = variant { Ok : vec Startup; Err : text };
type Result_33 = variant { Ok : vec TeamMember; Err : text };
type Result_34 = variant { Ok : User; Err : text };
type Result_35 = variant { Ok; Err : vec text };
type Result_4 = variant { Ok : vec UsageStats; Err : text };
type Result_5 = variant {
  Ok : vec record { text; nat32; UserTier };
  Err : text;
};
type Result_6 = variant {
  Ok : vec record { UserTier; nat32; nat32 };
  Err : text;
};
type Result_7 = variant { Ok : UserActivityReport; Err : text };
type Result_8 = variant { Ok : opt UserSubscription; Err : text };
type Result_9 = variant { Ok : UsageStats; Err : text };
type Result_10 = variant { Ok : StartupInvite; Err : text };
type Result_11 = variant { Ok : opt Accelerator; Err : text };
type Result_12 = variant { Ok : vec Accelerator; Err : text };
type Result_13 = variant { Ok : vec DiscordUser; Err : text };
type Result_14 = variant { Ok : vec OpenChatUser; Err : text };
type Result_15 = variant { Ok : vec SlackUser; Err : text };
type Result_16 = variant { Ok : vec User; Err : text };
type Result_17 = variant { Ok : opt Startup; Err : text };
type Result_18 = variant { Ok : vec StartupActivity; Err : text };
type Result_19 = variant { Ok : opt StartupInvite; Err : text };
type Result_2 = variant { Ok : vec ApiMessage; Err : text };
type Result_20 = variant { Ok : StartupStats; Err : text };
type Result_21 = variant { Ok : opt TeamInvite; Err : text };
type Result_22 = variant { Ok : vec WaitlistEntry; Err : text };
type Result_23 = variant { Ok : text; Err : text };
type Result_24 = variant { Ok : WaitlistEntry; Err : text };
type Result_25 = variant { Ok : vec StartupCohort; Err : text };
type Result_26 = variant { Ok : vec StartupStatus; Err : text };
type Result_27 = variant { Ok : vec Startup; Err : text };
type Result_28 = variant { Ok : vec TeamMember; Err : text };
type Result_29 = variant { Ok : User; Err : text };
type Result_3 = variant { Ok : PlaygroundStats; Err : text };
type Result_30 = variant { Ok; Err : vec text };
type Result_4 = variant { Ok : UserActivity; Err : text };
type Result_5 = variant { Ok : vec text; Err : text };
type Result_6 = variant { Ok : nat32; Err : text };
type Result_7 = variant { Ok : Startup; Err : text };
type Result_8 = variant { Ok : StartupCohort; Err : text };
type Result_9 = variant { Ok : StartupStatus; Err : text };
type Role = variant { ProgramManager; Viewer; SuperAdmin; Admin };
type SlackUser = record {
  site_principal : opt principal;
  slack_id : text;
  team_id : opt text;
  display_name : opt text;
};
type Startup = record {
  id : text;
  documents_submitted : nat32;
  updated_at : nat64;
  accelerator_id : principal;
  founder_principal : principal;
  name : text;
  contact_email : text;
  date_joined : nat64;
  description : opt text;
  created_at : nat64;
  status_id : text;
  last_activity : nat64;
  cohort_id : text;
  engagement_score : nat32;
  tasks_completed : nat32;
  total_logins : nat32;
  industry : opt text;
};
type StartupActivity = record {
  id : text;
  activity_type : StartupActivityType;
  startup_id : text;
  metadata : opt text;
  description : text;
  timestamp : nat64;
};
type StartupActivityType = variant {
  TaskCompleted;
  Login;
  StatusChanged;
  EngagementScoreUpdated;
  DocumentSubmitted;
  Other : text;
  CohortChanged;
};
type StartupCohort = record {
  id : text;
  accelerator_id : principal;
  name : text;
  description : opt text;
  end_date : opt nat64;
  created_at : nat64;
  start_date : opt nat64;
  is_active : bool;
};
type StartupCohortInput = record {
  name : text;
  description : opt text;
  end_date : opt nat64;
  start_date : opt nat64;
};
type StartupFilter = record {
  date_to : opt nat64;
  date_from : opt nat64;
  max_engagement_score : opt nat32;
  cohort_ids : opt vec text;
  status_ids : opt vec text;
  min_engagement_score : opt nat32;
  search_term : opt text;
};
type StartupInput = record {
  accelerator_id : text;
  name : text;
  contact_email : text;
  description : opt text;
  status_id : opt text;
  cohort_id : opt text;
  industry : opt text;
};
type StartupInvite = record {
  status : InviteStatus;
  accelerator_id : principal;
  program_name : text;
  registered_principal : opt principal;
  invite_id : text;
  invite_code : text;
  invite_type : InviteType;
  used_at : opt nat64;
  startup_name : text;
  created_at : nat64;
  email : opt text;
  expiry : nat64;
  registered_at : opt nat64;
};
type StartupRegistrationInput = record {
  invite_code : text;
  startup_name : text;
  email : text;
  founder_name : text;
};
type StartupStats = record {
  graduated_startups : nat32;
  active_startups : nat32;
  recent_activities : vec StartupActivity;
  startups_by_cohort : vec record { text; nat32 };
  average_engagement_score : nat32;
  total_startups : nat32;
  startups_by_status : vec record { text; nat32 };
};
type StartupStatus = record {
  id : text;
  accelerator_id : principal;
  name : text;
  color : text;
  sort_order : nat32;
  description : opt text;
  created_at : nat64;
  is_active : bool;
};
type StartupStatusInput = record {
  name : text;
  color : text;
  sort_order : opt nat32;
  description : opt text;
};
type StartupUpdate = record {
  name : opt text;
  contact_email : opt text;
  description : opt text;
  status_id : opt text;
  cohort_id : opt text;
  engagement_score : opt nat32;
  industry : opt text;
};
type SubscriptionTier = variant { Enterprise; Free; Professional };
type Task = record {
  id : text;
  status : text;
  title : text;
  creator : principal;
  platform_id : text;
  description : text;
  platform : text;
  created_at : nat64;
};
type TeamInvite = record {
  name : text;
  role : Role;
  email : text;
  accelerator_name : text;
};
type TeamMember = record {
  status : MemberStatus;
  "principal" : opt principal;
  token : opt text;
  name : text;
  role : Role;
  email : text;
};
type TeamMemberInviteWithId = record { name : text; role : Role; email : text };
type TokenValidationResult = record { platform_id : text; platform : text };
type UpdateTeamMemberRole = record { email : text; new_role : Role };
type UsageStats = record {
  tier : UserTier;
  day_bucket : nat64;
  user_id : text;
  requests_used : nat32;
  reset_time_rfc3339 : text;
  requests_limit : opt nat32;
};
type User = record {
  "principal" : principal;
  name : text;
  slack_id : opt text;
  created_at : nat64;
  email : opt text;
  openchat_id : opt text;
  subscription_tier : SubscriptionTier;
  discord_id : opt text;
};
type UserActivity = record {
  tasks : vec Task;
  connection_status : ConnectionStatus;
  issues : vec Issue;
  chat_history : vec ChatMessage;
};
type UserActivityReport = record {
  usage_stats : UsageStats;
  subscription : opt UserSubscription;
  can_make_more_requests : bool;
  user_id : text;
  total_api_messages : nat32;
  last_activity : nat64;
};
type UserIdentifier = variant {
  PlaygroundId : text;
  Principal : principal;
  SlackId : text;
  DiscordId : text;
  OpenChatId : text;
};
type UserSubscription = record {
  started_at_ns : opt nat64;
  renewed_at_ns : opt nat64;
  tier : UserTier;
  user_id : text;
  is_active : bool;
  expires_at_ns : opt nat64;
};
type UserTier = variant { Pro; Free };
type WaitlistEntry = record {
  status : WaitlistStatus;
  name : text;
  created_at : nat64;
  email : text;
};
type WaitlistStatus = variant { Approved; Rejected; Pending };
service : {
  accept_invitation : (text) -> (Result);
  accept_startup_invite : (StartupRegistrationInput) -> (Result);
  add_admin : (principal) -> (Result);
  add_chat_message : (text, BotType) -> (Result_1);
  admin_get_all_api_messages : () -> (Result_2) query;
  admin_get_all_user_subscriptions : () -> (Result_3) query;
  admin_get_all_user_usage_stats : () -> (Result_4) query;
  admin_get_api_messages_by_bot : (text) -> (Result_2) query;
  admin_get_api_messages_for_user : (UserIdentifier) -> (Result_2) query;
  admin_get_api_messages_for_user_by_bot : (UserIdentifier, text) -> (
      Result_2,
    ) query;
  admin_get_daily_usage_summary : () -> (Result_5) query;
  admin_get_playground_messages : () -> (Result_2) query;
  admin_get_playground_messages_by_bot : (text) -> (Result_2) query;
  admin_get_playground_stats : () -> (Result_3) query;
  admin_get_playground_user_activity : (text) -> (Result_4) query;
  admin_get_playground_users : () -> (Result_5) query;
  admin_get_recent_api_messages : (nat32) -> (Result_2) query;
  admin_get_recent_api_messages_for_user : (UserIdentifier, nat32) -> (
      Result_2,
    ) query;
  admin_get_top_users_by_requests : (nat32) -> (Result_5) query;
  admin_get_usage_by_tier : () -> (Result_6) query;
  admin_get_user_activity_report : (text) -> (Result_7) query;
  admin_get_user_subscription : (text) -> (Result_8) query;
  admin_get_user_usage_stats : (text) -> (Result_9) query;
  admin_get_users_at_limit : () -> (Result_5) query;
  admin_update_accelerator : (principal, AcceleratorUpdate) -> (Result);
  admin_upgrade_user_tier : (text, UserTier, opt nat64) -> (Result);
  api_can_make_request : (text) -> (bool) query;
  api_get_usage_stats : (text) -> (UsageStats) query;
  api_get_user_subscription : (text) -> (opt UserSubscription) query;
  api_get_user_tier : (text) -> (UserTier) query;
  api_increment_user_requests : (text) -> (Result);
  api_upgrade_user_tier : (text, UserTier, opt nat64) -> (Result);
  calculate_engagement_score : (text) -> (Result_10) query;
  check_auth : () -> (bool) query;
  create_startup : (StartupInput) -> (Result_11);
  create_startup_cohort : (StartupCohortInput) -> (Result_12);
  create_startup_status : (StartupStatusInput) -> (Result_13);
  admin_get_recent_playground_messages : (nat32) -> (Result_2) query;
  admin_update_accelerator : (principal, AcceleratorUpdate) -> (Result);
  calculate_engagement_score : (text) -> (Result_6) query;
  check_auth : () -> (bool) query;
  create_startup : (StartupInput) -> (Result_7);
  create_startup_cohort : (StartupCohortInput) -> (Result_8);
  create_startup_status : (StartupStatusInput) -> (Result_9);
  decline_invitation : (text) -> (Result);
  delete_accelerator : (principal) -> (Result);
  delete_startup : (text) -> (Result);
  delete_startup_cohort : (text) -> (Result);
  delete_startup_status : (text) -> (Result);
  ensure_discord_user : (text) -> ();
  ensure_openchat_user : (text) -> ();
  ensure_slack_user : (text) -> ();
  generate_dashboard_token : (text) -> (text);
  generate_startup_invite : (GenerateStartupInviteInput) -> (Result_14);
  get_accelerator_by_id : (principal) -> (Result_15) query;
  get_active_openchat_users : (nat64) -> (vec OpenChatUser) query;
  get_admin_details : () -> (vec record { principal; Admin }) query;
  get_admins : () -> (vec principal) query;
  get_all_accelerators : () -> (Result_16) query;
  get_api_message_history : (UserIdentifier) -> (vec ApiMessage) query;
  get_api_messages_by_bot : (UserIdentifier, text) -> (vec ApiMessage) query;
  generate_startup_invite : (GenerateStartupInviteInput) -> (Result_10);
  get_accelerator_by_id : (principal) -> (Result_11) query;
  get_active_openchat_users : (nat64) -> (vec OpenChatUser) query;
  get_admin_details : () -> (vec record { principal; Admin }) query;
  get_admins : () -> (vec principal) query;
  get_all_accelerators : () -> (Result_12) query;
  get_chat_history : (UserIdentifier) -> (vec ChatMessage) query;
  get_connection_status : (UserIdentifier) -> (ConnectionStatus) query;
  get_current_repo : (principal) -> (opt text) query;
  get_current_user : () -> (opt User) query;
  get_discord_user : (text) -> (opt DiscordUser) query;
  get_discord_user_by_principal : (principal) -> (opt DiscordUser) query;
  get_my_accelerator : () -> (Result_15);
  get_my_accelerator : () -> (Result_11);
  get_openchat_user : (text) -> (opt OpenChatUser) query;
  get_openchat_user_by_principal : (principal) -> (opt OpenChatUser) query;
  get_recent_api_messages : (UserIdentifier, nat32) -> (vec ApiMessage) query;
  get_registered_discord_users : () -> (vec DiscordUser) query;
  get_registered_discord_users_admin : () -> (Result_17) query;
  get_registered_openchat_users : () -> (vec OpenChatUser) query;
  get_registered_openchat_users_admin : () -> (Result_18) query;
  get_registered_slack_users : () -> (vec SlackUser) query;
  get_registered_slack_users_admin : () -> (Result_19) query;
  get_registered_users : () -> (Result_20) query;
  get_slack_user : (text) -> (opt SlackUser) query;
  get_slack_user_by_principal : (principal) -> (opt SlackUser) query;
  get_startup : (text) -> (Result_21) query;
  get_startup_activities : (text, opt nat64) -> (Result_22) query;
  get_startup_invite_by_code : (text) -> (Result_23) query;
  get_startup_stats : () -> (Result_24) query;
  get_team_invite_by_token : (text) -> (Result_25) query;
  get_token_info : (text) -> (opt DashboardToken) query;
  get_user_activity : (UserIdentifier) -> (UserActivity) query;
  get_user_activity_admin : (UserIdentifier) -> (Result_26) query;
  get_user_connections : (principal) -> (opt ConnectedAccounts) query;
  get_user_issues : (UserIdentifier) -> (vec Issue) query;
  get_user_tasks : (UserIdentifier) -> (vec Task) query;
  get_users : () -> (Result_20) query;
  get_waitlist : () -> (Result_27) query;
  invite_team_member : (TeamMemberInviteWithId) -> (Result_28);
  get_registered_discord_users_admin : () -> (Result_13) query;
  get_registered_openchat_users : () -> (vec OpenChatUser) query;
  get_registered_openchat_users_admin : () -> (Result_14) query;
  get_registered_slack_users : () -> (vec SlackUser) query;
  get_registered_slack_users_admin : () -> (Result_15) query;
  get_registered_users : () -> (Result_16) query;
  get_slack_user : (text) -> (opt SlackUser) query;
  get_slack_user_by_principal : (principal) -> (opt SlackUser) query;
  get_startup : (text) -> (Result_17) query;
  get_startup_activities : (text, opt nat64) -> (Result_18) query;
  get_startup_invite_by_code : (text) -> (Result_19) query;
  get_startup_stats : () -> (Result_20) query;
  get_team_invite_by_token : (text) -> (Result_21) query;
  get_token_info : (text) -> (opt DashboardToken) query;
  get_user_activity : (UserIdentifier) -> (UserActivity) query;
  get_user_activity_admin : (UserIdentifier) -> (Result_4) query;
  get_user_connections : (principal) -> (opt ConnectedAccounts) query;
  get_user_issues : (UserIdentifier) -> (vec Issue) query;
  get_user_tasks : (UserIdentifier) -> (vec Task) query;
  get_users : () -> (Result_16) query;
  get_waitlist : () -> (Result_22) query;
  invite_team_member : (TeamMemberInviteWithId) -> (Result_23);
  is_admin : () -> (bool) query;
  is_allowed_principal : () -> (bool) query;
  is_discord_user_registered : (text) -> (bool) query;
  is_registered : () -> (bool) query;
  is_slack_user_registered : (text) -> (bool) query;
  join_waitlist : (text) -> (Result_29);
  link_accounts : (principal, text) -> (Result);
  link_startup_principal : (text, text) -> (Result);
  link_token_to_principal : (text, principal) -> (Result);
  list_startup_cohorts : () -> (Result_30) query;
  list_startup_invites : (text) -> (vec StartupInvite) query;
  list_startup_statuses : () -> (Result_31) query;
  list_startups : (opt StartupFilter) -> (Result_32) query;
  list_team_members : () -> (Result_33) query;
  record_startup_activity : (text, StartupActivityType, text, opt text) -> (
      Result,
    );
  register_startup : (text, text, text) -> (Result_34);
  register_user : (text) -> (Result_34);
  remove_admin : (principal) -> (Result);
  remove_team_member : (RemoveTeamMember) -> (Result);
  revoke_startup_invite : (text) -> (Result);
  sign_up_accelerator : (AcceleratorSignUp) -> (Result_28);
  join_waitlist : (text) -> (Result_24);
  link_accounts : (principal, text) -> (Result);
  link_startup_principal : (text, text) -> (Result);
  link_token_to_principal : (text, principal) -> (Result);
  list_startup_cohorts : () -> (Result_25) query;
  list_startup_invites : (text) -> (vec StartupInvite) query;
  list_startup_statuses : () -> (Result_26) query;
  list_startups : (opt StartupFilter) -> (Result_27) query;
  list_team_members : () -> (Result_28) query;
  record_startup_activity : (text, StartupActivityType, text, opt text) -> (
      Result,
    );
  register_startup : (text, text, text) -> (Result_29);
  register_user : (text) -> (Result_29);
  remove_admin : (principal) -> (Result);
  remove_team_member : (RemoveTeamMember) -> (Result);
  revoke_startup_invite : (text) -> (Result);
  sign_up_accelerator : (AcceleratorSignUp) -> (Result_23);
  store_api_message : (UserIdentifier, text, text, text, opt ApiMetadata) -> ();
  store_asana_connection : (
      UserIdentifier,
      text,
      text,
      vec record { text; text },
    ) -> ();
  store_asana_task : (UserIdentifier, Task) -> (Result);
  store_chat_message : (UserIdentifier, ChatMessage) -> ();
  store_github_connection : (UserIdentifier, text, opt text) -> ();
  store_github_issue : (UserIdentifier, Issue) -> (Result);
  unlink_accounts : (text) -> (Result);
  update_accelerator : (principal, AcceleratorUpdate) -> (Result);
  update_engagement_score : (text, nat32) -> (Result);
  update_github_selected_repo : (UserIdentifier, text) -> (Result);
  update_my_accelerator : (AcceleratorUpdateWithId) -> (Result);
  update_startup : (text, StartupUpdate) -> (Result);
  update_startup_cohort : (text, StartupCohortInput) -> (Result);
  update_startup_status : (text, StartupStatusInput) -> (Result);
  update_team_member_role : (UpdateTeamMemberRole) -> (Result);
  validate_dashboard_token : (blob) -> (opt TokenValidationResult) query;
  verify_connections : (principal) -> (Result_35) query;
  verify_connections : (principal) -> (Result_30) query;
  verify_token : (text) -> (Result);
}
